-- This example is due to Ilya Klyuchnikov.

-- member(a, as) returns True, if a appears in the list as,
-- and False otherwise.

-- member(S(Z), as) returns True, if S(Z) appears in the list as, and False otherwise.
-- Upon supercompiling the source program, we get a version of `member`
-- "specialized" with respect to the value of its first argument. Besides,
-- the target program has the structure that is "simpler" than that of
-- the source program. The target program is "more imperative" in comparison
-- with the "more functional" source program, because its structure resembles
-- that of a "finite-state machine". 

member(S(Z), as)
where

eq(Z, y) = eqZ(y);
eq(S(x), y) = eqS(y, x);
eqZ(Z) = True;
eqZ(S(x)) = False;
eqS(Z, x) = False;
eqS(S(y), x) = eq(x, y);

memberSel(Nil, x) = False;
memberSel(Cons(y, ys), x) = memberEq(eq(x, y), x, ys);

memberEq(True, x, ys) = True;
memberEq(False, x, ys) = memberSel(ys, x);

member(x, ys) = memberSel(ys, x);
